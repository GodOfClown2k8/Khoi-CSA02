#Giải thích tham số của plt.subplots_adjust()
left: Khoảng cách từ lề trái (0 đến 1).
right: Khoảng cách từ lề phải (0 đến 1).
top: Khoảng cách từ lề trên (0 đến 1).
bottom: Khoảng cách từ lề dưới (0 đến 1).
Tính mật độ dân số:

#df['PopulationDensity'] = (df['Population'] / df['Area']).round(): Tính mật độ dân số và làm tròn.
Vẽ biểu đồ tần suất:

#plt.figure(figsize=[10, 10]): Thiết lập kích thước của biểu đồ.

#plt.xticks(...): Thiết lập các nhãn cho trục x. Bạn có thể điều chỉnh khoảng cách nếu cần.

#plt.hist(...): Vẽ biểu đồ tần suất.

#plt.title(...), plt.xlabel(...), và plt.ylabel(...): Đặt tiêu đề và nhãn cho các trục.

#plt.tight_layout(): Tự động điều chỉnh khoảng cách giữa các thành phần của biểu đồ để không bị chồng chéo.

#plt.axvline(...): Vẽ một đường thẳng dọc ở vị trí x = 4500, với màu đỏ và kiểu gạch ngang.

#label='Mật độ cao nhất (4500 người/km²)': Nhãn cho đường chỉ thị.

#plt.legend(): Hiển thị chú thích để người xem biết đường chỉ thị thể hiện điều gì.

#df['PopulationDensity'].max():

Đây là cách để tìm giá trị lớn nhất trong cột PopulationDensity của DataFrame df. Nó trả về giá trị mật độ dân số cao nhất trong dữ liệu.
int(...):

Hàm int() được sử dụng để đảm bảo rằng giá trị trả về là kiểu số nguyên. Điều này hữu ích vì các tham số trong np.arange() cần kiểu số nguyên.
int(df['PopulationDensity'].max()) + 1000:

Đây là giá trị tối đa cho mảng được tạo ra. Thêm 1000 vào giá trị lớn nhất đảm bảo rằng khoảng giá trị cho trục x đủ lớn để bao gồm các giá trị mật độ dân số.
np.arange(0, ..., 500):

Hàm np.arange(start, stop, step) tạo ra một mảng các số bắt đầu từ start (0 trong trường hợp này), đến stop (giá trị tối đa đã tính) với bước nhảy step (500).
Kết quả là mảng này sẽ chứa các giá trị từ 0 đến giá trị lớn nhất của mật độ dân số (cộng thêm 1000), với khoảng cách giữa các giá trị là 500.
Ví dụ
Giả sử giá trị lớn nhất của PopulationDensity là 4500. Khi đó:

int(df['PopulationDensity'].max()) + 1000 sẽ là 5500.

#plt.plot(years, events, marker='o', color='orange'): Vẽ biểu đồ đường thẳng với trục x là các năm (years) và trục y là số lượng lốc xoáy (events). Các điểm dữ liệu được đánh dấu bằng hình tròn (marker 'o') và đường kẻ có màu cam.
plt.title: Đặt tiêu đề cho biểu đồ.
plt.xlabel: Đặt nhãn cho trục x (năm).
plt.ylabel: Đặt nhãn cho trục y (số lượng sự kiện lốc xoáy).
plt.grid(True): Hiển thị lưới trên biểu đồ để dễ đọc các giá trị.
plt.show(): Hiển thị biểu đồ.
df[1:1] # lay tu [1;1)
df[1:2] # lay tu [1;2)
df[1:] #lay het 
df[df['Region'] != 'Đông Bắc Bộ'] # df[~(df['Region'] == 'Đông Bắc Bộ')]
Được sử dụng injury_counts.index cho nhãn trục x và injury_counts.values chiều cao thanh.
Giải thích các thay đổi:

Chúng ta sử dụng data['news'].str.contains('injury', case=False, na=False) để lọc chỉ các hàng có chứa từ "injury" trong cột 'news'. Tham số case=False cho phép tìm kiếm không phân biệt chữ hoa chữ thường, và na=False để bỏ qua các giá trị NaN.

Chúng ta tạo một DataFrame mới injury_data chỉ chứa các hàng có liên quan đến chấn thương.

Sau đó, chúng ta đếm số lượng cho mỗi loại chấn thương trong injury_data.

Phần còn lại của code vẫn giữ nguyên để tạo và hiển thị biểu đồ.

for bar in bars:: Lặp qua từng thanh (bar) trong biểu đồ. Mỗi bar là một đối tượng đại diện cho một cột trong biểu đồ.

height = bar.get_height(): Lấy chiều cao của thanh hiện tại. Đây chính là giá trị số lượng mà thanh đó đại diện.

plt.text(...): Hàm này được sử dụng để thêm văn bản vào biểu đồ. Các tham số của nó là:

bar.get_x() + bar.get_width()/2.: Đây là vị trí x của văn bản.

bar.get_x() lấy vị trí x của cạnh trái của thanh.
bar.get_width()/2. là một nửa chiều rộng của thanh.
Cộng hai giá trị này cho ta vị trí chính giữa của thanh theo chiều ngang.
height: Đây là vị trí y của văn bản, được đặt ở đỉnh của thanh.

f'{height}': Đây là nội dung văn bản, là giá trị chiều cao của thanh được chuyển thành chuỗi.

ha='center': Căn giữa văn bản theo chiều ngang (horizontal alignment).

va='bottom': Căn dưới văn bản theo chiều dọc (vertical alignment), đặt văn bản ngay trên đỉnh của thanh.
.apply() được sử dụng để áp dụng hàm extract_main_injury lên mỗi phần tử của cột 'news' trong DataFrame, tạo ra một cột mới 'main_injury' chứa kết quả của việc xử lý này.